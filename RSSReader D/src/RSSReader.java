import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Ayman Abumaike
 *
 */
public final class RSSReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RSSReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body>
     * <h1>the page title inside a link to the <channel> link</h1>
     * <p>
     * the channel description
     * </p>
     * <table border="1">
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
                + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Initialize values with default values.
        String title = "Empty title";
        String link = "";
        String description = "No description";

        // Extract index of title from channel.
        int titleIndex = getChildElement(channel, "title");
        // Assign value if title exists and is not blank.
        if (titleIndex != -1) {
            if (channel.child(titleIndex).numberOfChildren() > 0) {

                title = channel.child(titleIndex).child(0).label();
            }
        }

        // Extract index of description from channel.
        int descriptionIndex = getChildElement(channel, "description");
        // Assign value if description exists and is not blank.
        if (descriptionIndex != -1) {
            if (channel.child(descriptionIndex).numberOfChildren() > 0) {

                description = channel.child(descriptionIndex).child(0).label();
            }
        }

        // Extract index of link from channel.
        int linkIndex = getChildElement(channel, "link");
        // Assign value if link exists and is not blank.
        if (linkIndex != -1) {
            link = channel.child(linkIndex).child(0).label();
        }

        // Print the opening values to the HTML file.
        out.println("<html>");
        out.println("<head>");
        out.println("<title>" + title + "</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("<h1><a href=" + link + ">" + title + "</a></h1>");
        out.println("<p>" + description + "</p>");
        out.println("<table border=\"1\">");
        out.println("<tr>");
        out.println("<th>Date</th>");
        out.println("<th>Source</th>");
        out.println("<th>News</th>");
        out.println("</tr>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */
    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        // Print closing tags to HTML file.
        out.println("</table>");
        out.println("</body>");
        out.println("</html>");

    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */
    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        // Initialize variable with default return value.
        int element = -1;
        /*
         * Loop through elements in tree and find child with matching tag,
         * assigning its index to the variable element;
         */
        for (int i = 0; i < xml.numberOfChildren(); i++) {
            if (xml.child(i).isTag() && xml.child(i).label().equals(tag)) {
                element = i;
            }
        }

        // Return element.
        return element;
    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the label of the root of item is an <item> tag] and
     *           out.is_open
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */
    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
                + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        // Initialize values with default values.
        String news = "No news available";
        String pubDate = "No date available";
        String link = "";
        String source = "No source available";
        String linkToSource = "";

        // Extract index of title from item.
        int titleIndex = getChildElement(item, "title");
        int descriptionIndex = getChildElement(item, "description");
        // Assign value if title exists and is not blank.
        if (titleIndex != -1) {
            if (item.child(titleIndex).numberOfChildren() > 0) {

                news = item.child(titleIndex).child(0).label();
            }
        } else if (descriptionIndex != -1) {
            if (item.child(descriptionIndex).numberOfChildren() > 0) {

                news = item.child(descriptionIndex).child(0).label();
            }
        }
        // Extract index of pubDate from item.
        int pubDateIndex = getChildElement(item, "pubDate");
        // Assign value if pubDate exists and is not blank.
        if (pubDateIndex != -1
                && !(item.child(pubDateIndex).child(0).label().isBlank())) {
            pubDate = item.child(pubDateIndex).child(0).label();
        }

        // Extract index of pubDate from item.
        int linkIndex = getChildElement(item, "link");
        // Assign value if link exists and is not blank.
        if (linkIndex != -1
                && !(item.child(linkIndex).child(0).label().isBlank())) {
            link = item.child(linkIndex).child(0).label();
        }

        // Extract index of source from item.
        int sourceIndex = getChildElement(item, "source");
        // Assign source and its link if source exists and is not blank.
        if (sourceIndex != -1) {
            if (item.child(sourceIndex).numberOfChildren() > 0) {
                {
                    source = item.child(sourceIndex).child(0).label();
                    linkToSource = item.child(sourceIndex)
                            .attributeValue("url");
                }
            }
        }

        out.println("<tr>");

        out.println("<td>" + pubDate + "</td>");
        out.println("<td><a href=" + linkToSource + ">" + source + "<a/></td>");
        out.println("<td><a href=" + link + ">" + news + "<a/></td>");

        out.println("</tr>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        // Input the source URL.
        out.print("Enter the URL of an RSS 2.0 news feed: ");
        String url = in.nextLine();

        // Input the output file name.
        out.print("Enter the name of the output file: ");
        String file = in.nextLine();

        // Open stream for file.
        SimpleWriter writer = new SimpleWriter1L(file);

        /*
         * Read XML input and initialize XMLTree. If input is not legal XML,
         * this statement will fail.
         */
        XMLTree xml = new XMLTree1(url);

        // Check tag to see if file is valid RSS.
        if (xml.isTag() && xml.label().equals("rss")
                && xml.hasAttribute("version")
                && xml.attributeValue("version").equals("2.0")) {

            //<rss version="2.0"
            // Extract channel element.
            XMLTree channel = xml.child(0);

            // Write header to HTML file.
            outputHeader(channel, writer);

            /*
             * Write table by iterating through each item element and writing it
             * to the HTML file.
             */
            for (int i = 0; i < channel.numberOfChildren(); i++) {
                if (channel.child(i).label().equals("item")) {
                    processItem(channel.child(i), writer);
                }

            }

            // Write footer to HTML file.
            outputFooter(writer);
        }

        // Close file streams.
        in.close();
        out.close();
    }

}
